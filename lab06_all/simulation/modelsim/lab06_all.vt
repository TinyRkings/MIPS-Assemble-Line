// Copyright (C) 1991-2012 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/18/2014 14:08:52"
                                                                                
// Verilog Test Bench template for design : lab06_all
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 10 us/ 1 ps
module lab06_all_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
// wires                                               
wire [1:0]  ALU_SrcA;
wire [1:0]  ALU_SrcB;
wire [31:0]  A_in;
wire [31:0]  B_in;
wire [5:0]  Func;
wire [31:0]  Immediate32_2;
wire Jump;
wire Jump2;
wire Less;
wire [31:0]  Mem_data_out;
wire Memwrite;
wire [5:0]  OP;
wire [31:0]  OperandA;
wire [31:0]  OperandB;
wire Overflow;
wire [31:0]  PC_in;
wire [31:0]  PC_out;
wire [1:0]  PC_src;
wire [4:0]  Rd;
wire [4:0]  Rd_addr;
wire [4:0]  Rd_addr2;
wire Regwr3;
wire Regwr4;
wire [4:0]  Rs;
wire [4:0]  Rt;
wire [4:0]  Shamt;
wire [31:0]  Shift_out;
wire [31:0]  WBdata;
wire [31:0]  WBdata2;
wire [31:0]  WriteData;
wire [4:0]  WriteReg;
wire branch;
wire branch2;
wire [31:0]  branch_addr;
wire jishu;
wire jishu2;
wire [31:0]  jump_addr;
wire [31:0]  newOperandB;
wire [1:0]  newOperandB_src;
wire [31:0]  right_Mem;
wire [31:0]  right_answer;

// assign statements (if any)                          
lab06_all i1 (
// port map - connection between master ports and signals/registers   
	.ALU_SrcA(ALU_SrcA),
	.ALU_SrcB(ALU_SrcB),
	.A_in(A_in),
	.B_in(B_in),
	.Func(Func),
	.Immediate32_2(Immediate32_2),
	.Jump(Jump),
	.Jump2(Jump2),
	.Less(Less),
	.Mem_data_out(Mem_data_out),
	.Memwrite(Memwrite),
	.OP(OP),
	.OperandA(OperandA),
	.OperandB(OperandB),
	.Overflow(Overflow),
	.PC_in(PC_in),
	.PC_out(PC_out),
	.PC_src(PC_src),
	.Rd(Rd),
	.Rd_addr(Rd_addr),
	.Rd_addr2(Rd_addr2),
	.Regwr3(Regwr3),
	.Regwr4(Regwr4),
	.Rs(Rs),
	.Rt(Rt),
	.Shamt(Shamt),
	.Shift_out(Shift_out),
	.WBdata(WBdata),
	.WBdata2(WBdata2),
	.WriteData(WriteData),
	.WriteReg(WriteReg),
	.branch(branch),
	.branch2(branch2),
	.branch_addr(branch_addr),
	.clk(clk),
	.jishu(jishu),
	.jishu2(jishu2),
	.jump_addr(jump_addr),
	.newOperandB(newOperandB),
	.newOperandB_src(newOperandB_src),
	.right_Mem(right_Mem),
	.right_answer(right_answer)
);
always
#10 clk=~clk;
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
clk=0;
#1250 $stop;                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

