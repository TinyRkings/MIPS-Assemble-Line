module lab05_121220063(clk,Mem_data_out,PC_in,PC_out,IR,ALUShift_out,AddrReg_out,Rd_write_byte_en,Rs_out,Rt_out,A_in,B_in,Rd_in,Overflow,Less);
input clk;
//程序计数器模块变量定义
output wire[31:0]PC_in;
output [31:0]PC_out;
wire PC_write_en;
//存储器模块定义
wire [31:0]Mem_addr_in;
output wire[31:0]AddrReg_out;
wire [3:0]Mem_byte_wr_in;
wire [31:0]Mem_data_in;
output wire [31:0]Mem_data_out;
//指令寄存器模块变量定义
output [31:0]IR;
wire IR_write_en;
//控制器变量定义
wire ALUsrcA,ALUShift_sel,Jump,Ex_top,Shift_amountSrc;
wire IorD;
wire RegDt0;
wire [1:0]Memtoreg;
wire [1:0]RegDst;
wire PC_write,PC_write_cond;
wire [2:0]ALUsrcB;
wire [3:0]ALU_op;
wire [2:0]Condition;
wire [1:0]Shift_op;
wire [1:0]PC_source;
wire AddrReg_write_en;
output wire[31:0]Rd_in;
output wire[31:0]ALUShift_out;
output wire[3:0]Rd_write_byte_en;
output [31:0]Rt_out;//寄存器组输出Rt_out
output [31:0]Rs_out;//寄存器组输出Rs_out
wire [31:0]ALU_out;
output wire Less;
wire Zero;
output Overflow;
output [31:0]A_in;//ALU的A_in
output [31:0]B_in;//ALU的B_in
wire [31:0]Shift_out2;
wire [31:0]Mem_data_shift;
get_PC u1(clk,PC_write_en,PC_in,PC_out);//获取新PC
Mem u2(clk,PC_out,AddrReg_out,IorD,Mem_addr_in[1:0],Mem_byte_wr_in,Mem_data_in,Mem_data_out);//存储器模块
get_IR_PC u3(clk,Mem_data_out,IR_write_en,IR);//指令寄存器模块
control_all u4(clk,IR[31:16],IR[10:0],Mem_addr_in,  RegDt0,IR_write_en,Mem_byte_wr_in,Memtoreg,IorD,PC_write,PC_write_cond,
RegDst,Condition,ALUsrcA,ALUsrcB,ALU_op,Ex_top,Shift_op,Shift_amountSrc,PC_source,ALUShift_sel,AddrReg_write_en);//控制器各输出
registers_all u6(clk,IR[25:21],IR[20:16],IR[15:11],RegDt0,RegDst,Rd_in,Rd_write_byte_en,Rs_out,Rt_out);//调用寄存器组模块
update_input_ALU u7(ALUsrcA,ALUsrcB,Rs_out,Rt_out,PC_out,IR[15:0],Ex_top,A_in,B_in);//获取ALU的A_in和B_in
ALU_32 u8(A_in,B_in,ALU_op,ALU_out,Less,Overflow,Zero);//调用ALU模块
updateRd_enable u9(Overflow,IR,Mem_addr_in[1:0],Rd_write_byte_en);//得到Rd_write_byte_en
Shift_move u10(Rt_out,Shift_amountSrc,IR[10:6],Rs_out,Shift_op,Shift_out2);//调用桶形寄存器模块
out_ALU_Shift u11(ALU_out,Shift_out2,ALUShift_sel,ALUShift_out);//output ALUshift_out值
Addr_register u12(clk,ALUShift_out,AddrReg_write_en,AddrReg_out);//地址寄存器
return_PC_in u13(ALUShift_out,AddrReg_out,PC_out,PC_source,IR[25:0],PC_in);//反馈PC_in
MemoutputShift u14(IR[31:26],Mem_data_out,Mem_addr_in[1:0],Mem_data_shift);//存储器输出移位器
RegoutputShift u15(IR[31:26],Rt_out,Mem_addr_in[1:0],Mem_data_in);//寄存器输出移位器
return_Rd_in u16(Memtoreg,AddrReg_out,Mem_data_shift,ALU_out,Rd_in);//反馈Rd_in;
produce_PC_write_en u17(PC_write,PC_write_cond,Condition,Less,Zero,PC_write_en);//produce PC_write_en
endmodule


module get_PC(clk,PC_write_en,PC_in,PC);//程序计数器模块，来获取PC
input clk;
input PC_write_en;
input [31:0]PC_in;
output reg [31:0]PC;
initial PC = 32'b0;
always @(negedge clk)
if(PC_write_en==1)//读入，高有效
begin
	PC=PC_in;
end
endmodule

module Mem(clk,PC_out,AddrReg_out,IorD,Mem_addr_in,Mem_byte_wr_in,Mem_data_in,Mem_data_out);//存储器模块
input clk;
input IorD;
input [31:0]PC_out,AddrReg_out;
output reg [31:0]Mem_addr_in;
input [3:0]Mem_byte_wr_in;
input [31:0]Mem_data_in;
output reg [31:0]Mem_data_out;
reg [31:0]mem[200:0];
initial 
begin
 mem[0][31:0]={6'd0,5'd1,5'd2,5'd3,5'd0,6'b100000};//add
 mem[4][31:0]={6'b001000,5'd1,5'd4,16'd1025};//addi
 mem[8][31:0]={6'b001001,5'd2,5'd5,16'd1022};//addiu
 mem[12][31:0]={6'd0,5'd4,5'd1,5'd6,5'd0,6'b100010};//sub
 mem[16][31:0]={6'd0,5'd6,5'd5,5'd7,5'd0,6'b100011};//subu
 mem[20][31:0]={6'b011111,5'd0,5'd4,5'd8,5'b10000,6'b100000};//seb rd rt
 mem[24][31:0]={6'd0,5'd1,5'd4,5'd9,5'd0,6'b100111};//nor rd,rs,rt
 mem[28][31:0]={6'b001110,5'd1,5'd10,16'd511};//xori rt,rs,imm
 mem[32][31:0]={6'b011100,5'd1,5'd0,5'd11,5'd0,6'b100001};//clo rd,rs
 mem[36][31:0]={6'b011100,5'd1,5'd0,5'd12,5'd0,6'b100000};//clz rd,rs
 mem[40][31:0]={6'd0,5'd12,5'd30,5'd13,5'd0,6'b000111};//srav rd,rt,rs,算术右移22位，（12）为22
 mem[44][31:0]={6'd0,4'd0,1'b1,5'd31,5'd14,5'd5,6'b000010};//rotr rd,rt,shamt，循环右移
 mem[48][31:0]={6'd0,5'd1,5'd5,5'd15,5'd0,6'b101011};//sltu rd,rs,rt
 mem[52][31:0]={6'b001010,5'd4,5'd16,16'd2047};//slti rt,rs,imm
 mem[56][31:0]={6'b000010,26'd18};//j target,跳转到18*4=72的位置
 mem[72][31:0]={6'b001000,5'd30,5'd17,16'h00ff};//addi,检验Overflow
 mem[76][31:0]={6'b011100,5'd1,5'd0,5'd18,5'd0,6'b100000};//clz rd,rs
 mem[80][31:0]={6'b000001,5'd1,5'b10001,16'd4};//bgezal rs,offset，跳转到80+4*4+4=100位置
 mem[100][31:0]={6'b001111,5'd0,5'd19,16'h1f31};//lui rt,imm
 mem[104][31:0]={6'b100010,5'd0,5'd20,16'd4};//lwl rt,offset(base) 0号寄存器内容加上4
 mem[108][31:0]={6'b100011,5'd0,5'd21,16'd8};//lw rt,offset(base) 0号寄存器内容加上8
 mem[112][31:0]={6'b101011,5'd0,5'd20,16'd116};//sw rt,offset(rs)  0号寄存器内容加上116，执行20寄存器内容指令，即为mem[4]指令
 mem[120][31:0]={6'b101110,5'd0,5'd21,16'd124};//swr rt,offset(rs)  0号寄存器内容加上124，执行21寄存器内容指令，即为mem[8]指令
end
always @(negedge clk)begin
	case(IorD)
		1'b0:Mem_addr_in=PC_out;
		1'b1:Mem_addr_in=AddrReg_out;
	endcase
	if(Mem_byte_wr_in==4'b1111)//写内容，高有效
		mem[Mem_addr_in]=Mem_data_in;
	else if(Mem_byte_wr_in==4'b0000)
		Mem_data_out=mem[Mem_addr_in];
	Mem_data_out=mem[Mem_addr_in];
end
endmodule

module get_IR_PC(clk,Mem_data_out,IR_write_en,IR);//指令寄存器模块
input clk;
input [31:0]Mem_data_out;
input IR_write_en;
output reg [31:0]IR;
always @(negedge clk)
begin
	if(IR_write_en==1)
	begin
		IR<=Mem_data_out;
	end
end
endmodule


module control_all(clk,IR_big,IR,Mem_addr_in,  RegDt0,IR_write_en,Mem_byte_wr_in,Memtoreg,IorD,PC_write,PC_write_cond,
RegDst,condition,ALUsrcA,ALUsrcB,ALU_op,Ex_top,Shift_op,Shift_amountSrc,PC_source,ALUShift_sel,AddrReg_write_en);//控制器各输出
input clk;
input [31:16]IR_big;
input [10:0]IR;
input [1:0]Mem_addr_in;
reg [3:0]static;
initial static=4'd0;
output reg RegDt0,IR_write_en,IorD,PC_write,PC_write_cond,ALUsrcA,Ex_top,Shift_amountSrc,ALUShift_sel,AddrReg_write_en;
output reg [3:0]Mem_byte_wr_in,ALU_op;
output reg [1:0]Memtoreg,RegDst,PC_source,Shift_op;
output reg [2:0]condition,ALUsrcB;
always @(posedge clk)
begin
case(static)
4'd0:
begin
	static<=4'd1;
	Mem_byte_wr_in<=4'b0000;
	ALUsrcA<=0;
	ALUsrcB<=3'd1;
	ALU_op<=4'b1110;//加法，可产生溢出
	ALUShift_sel<=0;
	AddrReg_write_en<=0;//高位有效
	PC_source<=2'd0;
	IR_write_en<=0;//高有效
	IorD<=0;
	PC_write<=0;//为了使使能端无效
	PC_write_cond<=0;//
	condition<=3'b000;
	RegDst<=2'd3;//important,会产生影响
	Memtoreg<=2'b00;
	//以下为无关变量
	RegDt0<=0;
	Ex_top<=0;
	Shift_op<=2'b00;
	Shift_amountSrc<=0;
end
4'd1:
begin
	static<=4'd2;
	ALUsrcA<=0;
	ALUsrcB<=3'd1;
	ALU_op<=4'b1110;//加法，可产生溢出
	ALUShift_sel<=0;
	AddrReg_write_en<=0;//高位有效
	PC_source<=2'd0;
	IR_write_en<=1;//高有效
	IorD<=0;
	PC_write<=1;//为了使使能端有效
	PC_write_cond<=0;//
	Mem_byte_wr_in<=4'b0000;
	RegDst<=2'd3;//important,会产生影响
	Memtoreg<=2'b00;
//以下为无关变量
	RegDt0<=0;
	condition<=3'b000;
	Ex_top<=0;
	Shift_op<=2'b00;
	Shift_amountSrc<=0;
end
4'd2:
begin
	AddrReg_write_en<=1;//高位有效
	PC_write<=0;//为了使使能端有效
	PC_write_cond<=1;//
	IR_write_en<=0;//高有效
	IorD<=1;
	Mem_byte_wr_in<=4'b0000;
case(IR_big[31:26])
6'b000000:
begin
case(IR[5:0])
6'b100000://add
begin
	static<=4'd6;
	RegDt0<=0;
	Memtoreg<=2'b10;
	RegDst<=2'b01;
	condition<=3'b000;//无关
	ALUsrcA<=1;
	ALUsrcB<=3'b000;
	ALU_op<=4'b1110;
	Ex_top<=0;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
6'b100010://sub
begin
	static<=4'd6;
	RegDt0<=0;
	Memtoreg<=2'b10;
	RegDst<=2'b01;
	condition<=3'b000;//无关
	ALUsrcA<=1;
	ALUsrcB<=3'b000;
	ALU_op<=4'b1111;
	Ex_top<=0;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
6'b100011://subu
begin
	static<=4'd6;
	RegDt0<=0;
	Memtoreg<=2'b10;
	RegDst<=2'b01;
	condition<=3'b000;//无关
	ALUsrcA<=1;
	ALUsrcB<=3'b000;
	ALU_op<=4'b0001;
	Ex_top<=0;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
6'b100111://nor,或非
begin
	static<=4'd6;
	RegDt0<=0;
	Memtoreg<=2'b10;
	RegDst<=2'b01;
	condition<=3'b000;//无关
	ALUsrcA<=1;
	ALUsrcB<=3'b000;
	ALU_op<=4'b1000;
	Ex_top<=0;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
6'b101011://sltu
begin
	static<=4'd6;
	RegDt0<=0;
	Memtoreg<=2'b10;
	RegDst<=2'b01;
	condition<=3'b000;//无关
	ALUsrcA<=1;
	ALUsrcB<=3'b000;
	ALU_op<=4'b0111;
	Ex_top<=0;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
6'b000111://srav,算术右移
begin
	static<=4'd6;
	RegDt0<=0;
	Memtoreg<=2'b00;
	RegDst<=2'b01;
	condition<=3'b000;//无关
	ALUsrcA<=0;//无关
	ALUsrcB<=3'b000;//无关
	ALU_op<=4'b0000;//无关
	Ex_top<=0;
	Shift_op<=2'b10;//
	Shift_amountSrc<=1;
	PC_source<=2'd0;
	ALUShift_sel<=1;
end
6'b000010://rotr,循环右移
begin
	static<=4'd6;
	RegDt0<=0;
	Memtoreg<=2'b00;
	RegDst<=2'd1;//
	Shift_amountSrc<=0;
	Shift_op<=2'b11;//
	condition<=3'b000;//
	ALUsrcA<=0;//
	ALUsrcB<=3'b000;//无关
	ALU_op<=4'b0000;//无关
	Ex_top<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=1;
end
endcase
end
6'b000001://bgezal
begin
	if(IR_big[20:16]==5'b00001)//bgez
		begin
			static<=4'd9;
			RegDt0<=0;
			Memtoreg<=2'b10;
			RegDst<=2'b00;
			condition<=3'b000;//
			ALUsrcA<=1;//
			ALUsrcB<=3'd3;//
			ALU_op<=4'b1110;//
			Ex_top<=1;
			Shift_op<=2'b00;//无关
			Shift_amountSrc<=0;//无关
			PC_source<=2'd0;//
			ALUShift_sel<=0;
		end
	else if(IR_big[20:16]==5'b10001)//bgezal，先计算PC+offset
		begin
			static<=4'd10;
			RegDt0<=0;
			Memtoreg<=2'b10;
			RegDst<=2'b00;
			condition<=3'b000;//
			ALUsrcA<=0;//
			ALUsrcB<=3'd3;//
			ALU_op<=4'b1110;//
			Ex_top<=1;
			Shift_op<=2'b00;//无关
			Shift_amountSrc<=0;//无关
			PC_source<=2'd1;//
			ALUShift_sel<=0;
		end
end
6'b000010://j target
begin
	static<=4'd0;
	PC_source<=2'b10;//
	RegDt0<=0;//no 
	Memtoreg<=2'b00;// no
	RegDst<=2'b00;//yes
	condition<=3'b111;//
	ALUsrcA<=0;//
	ALUsrcB<=3'b000;//无关
	ALU_op<=4'b0000;//无关
	Ex_top<=0;//yes
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;//无关
	ALUShift_sel<=0;
end
6'b001000://addi
begin
	static<=4'd8;
	RegDt0<=0;
	Memtoreg<=2'b10;
	RegDst<=2'b00;
	condition<=3'b000;//无关
	ALUsrcA<=1;
	ALUsrcB<=3'b010;
	ALU_op<=4'b1110;
	Ex_top<=1;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
6'b001001://addiu
begin
	static<=4'd8;
	RegDt0<=0;
	Memtoreg<=2'b10;
	RegDst<=2'b00;
	condition<=3'b000;//无关
	ALUsrcA<=1;
	ALUsrcB<=3'b010;
	ALU_op<=4'b0000;
	Ex_top<=1;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
6'b001010://slti
begin
	static<=4'd8;
	RegDt0<=0;
	Memtoreg<=2'b10;
	RegDst<=2'b00;
	condition<=3'b000;//无关
	ALUsrcA<=1;
	ALUsrcB<=3'b010;
	ALU_op<=4'b0101;
	Ex_top<=1;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
6'b001110://xori
begin
static<=4'd8;
RegDt0<=0;
Memtoreg<=2'b10;
RegDst<=2'b00;
condition<=3'b000;//无关
ALUsrcA<=1;
ALUsrcB<=3'b010;
ALU_op<=4'b1001;
Ex_top<=0;
Shift_op<=2'b00;//无关
Shift_amountSrc<=0;
PC_source<=2'd0;//
ALUShift_sel<=0;
end
6'b011100:
begin
if(IR[5:0]==6'b100000)//clz,前导零
begin
	static<=4'd6;
RegDt0<=0;
Memtoreg<=2'b10;
RegDst<=2'b01;
condition<=3'b000;//无关
ALUsrcA<=1;
ALUsrcB<=3'b000;
ALU_op<=4'b0010;
Ex_top<=0;
Shift_op<=2'b00;//无关
Shift_amountSrc<=0;
PC_source<=2'd0;//
ALUShift_sel<=0;
end
else if(IR[5:0]==6'b100001)//clo,前导一
begin
	static<=4'd6;
	RegDt0<=0;
	Memtoreg<=2'b10;
	RegDst<=2'b01;
	condition<=3'b000;//无关
	ALUsrcA<=1;
	ALUsrcB<=3'b000;
	ALU_op<=4'b0011;
	Ex_top<=0;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
end
6'b011111://seb
begin
	static<=4'd6;
RegDt0<=0;
Memtoreg<=2'b10;
RegDst<=2'b01;
condition<=3'b000;//无关
ALUsrcA<=1;
ALUsrcB<=3'b000;
ALU_op<=4'b1010;
Ex_top<=0;
Shift_op<=2'b00;//无关
Shift_amountSrc<=0;
PC_source<=2'd0;//
ALUShift_sel<=0;
end
6'b001111://lui
begin
	static<=4'd8;
RegDt0<=0;
Memtoreg<=2'b10;
RegDst<=2'b00;
condition<=3'b000;//无关
ALUsrcA<=1;
ALUsrcB<=3'b100;
ALU_op<=4'b0000;
Ex_top<=0;
Shift_op<=2'b00;//无关
Shift_amountSrc<=0;
PC_source<=2'd0;//
ALUShift_sel<=0;
end
6'b100010,6'b100011://lwl,lw
begin
	static<=4'd3;
	condition<=3'b000;//
	Memtoreg<=2'd1;//
	RegDt0<=0;//no use
	RegDst<=2'd0;
	ALUsrcA<=1;
	ALUsrcB<=3'b010;
	ALU_op<=4'b1110;
	Ex_top<=1;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
6'b101011,6'b101110://sw,swr,计算[base]+offset,缓存到AddrReg_out
begin
	static<=4'd5;
	condition<=3'b000;//
	Memtoreg<=2'd3;//
	RegDt0<=0;//no use	
	RegDst<=2'd3;
	ALUsrcA<=1;
	ALUsrcB<=3'b010;
	ALU_op<=4'b1110;
	Ex_top<=1;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
endcase
end
4'd3:
begin
	static<=4'd4;
	AddrReg_write_en<=0;//高位有效
	PC_write<=0;//为了使使能端有效
	PC_write_cond<=1;//
	IR_write_en<=0;//高有效
	IorD<=1;
	Mem_byte_wr_in<=4'b0000;
	condition<=3'b000;//
	Memtoreg<=2'd1;//
	RegDt0<=0;//no use
	RegDst<=2'd0;
	ALUsrcA<=1;
	ALUsrcB<=3'b010;
	ALU_op<=4'b1110;
	Ex_top<=1;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
4'd4:
begin
	static<=4'd0;
	AddrReg_write_en<=0;//高位有效
	PC_write<=0;//为了使使能端有效
	PC_write_cond<=1;//
	IR_write_en<=0;//高有效
	IorD<=1;
	Mem_byte_wr_in<=4'b0000;
	condition<=3'b000;//
	Memtoreg<=2'd1;//
	RegDt0<=0;//no use
	RegDst<=2'd0;
	ALUsrcA<=1;
	ALUsrcB<=3'b010;
	ALU_op<=4'b1110;
	Ex_top<=1;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
4'd5:
begin
	static<=4'd0;	
	AddrReg_write_en<=0;//高位有效
	PC_write<=0;//为了使使能端有效
	PC_write_cond<=1;//
	IR_write_en<=0;//高有效
	IorD<=1;
	Mem_byte_wr_in<=4'b1111;
	condition<=3'b000;//
	Memtoreg<=2'd3;//
	RegDt0<=0;//important
	RegDst<=2'd3;
	ALUsrcA<=1;
	ALUsrcB<=3'b010;
	ALU_op<=4'b1110;
	Ex_top<=1;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;
	PC_source<=2'd0;//
	ALUShift_sel<=0;
end
4'd6://存入
begin
	static<=4'd0;
	Mem_byte_wr_in=4'b0000;
	PC_write<=0;//为了使使能端有效
	PC_write_cond<=1;//
	IorD<=0;
	IR_write_en<=0;//高有效
	AddrReg_write_en<=0;
end
/*4'd7://仅仅使用了一个周期
begin
	static<=4'd0;
end*/
4'd8:
begin
	static<=4'd0;
	IR_write_en<=0;//高有效
	Mem_byte_wr_in=4'b0000;
	IorD<=1;
	AddrReg_write_en<=0;
end
4'd10://bgezal中存PC+8到rs[31]
begin
	static<=4'd11;
	ALUsrcA<=0;
	ALUsrcB<=3'd1;
	ALU_op<=4'b1110;//加法，可产生溢出
	RegDst<=2'b10;
	Memtoreg<=2'b10;
	PC_write<=0;//为了使使能端有效
	PC_write_cond<=0;//
	IR_write_en<=0;//高有效
	condition<=3'b000;
		
	ALUShift_sel<=0;
	AddrReg_write_en<=0;//高位有效
	PC_source<=2'd1;
	IorD<=0;
	Mem_byte_wr_in<=4'b0000;
	//以下为无关变量
	RegDt0<=0;
	Ex_top<=0;
	Shift_op<=2'b00;
	Shift_amountSrc<=0;
end
4'd11://bgezal,跳转
begin
	static<=4'd0;
	ALUsrcA<=1;//
	ALUsrcB<=3'd0;//
	RegDt0<=1;
	ALU_op<=4'b1111;//
	condition<=3'd3;//需要大于等于0
	ALUShift_sel<=0;
	PC_source<=2'b01;//
	PC_write<=0;//为了使使能端有效
	PC_write_cond<=1;//
	IR_write_en<=0;//高有效
	AddrReg_write_en<=0;//高位有效
	RegDst<=2'd3;//置为高阻态
	
	Memtoreg<=2'b00;
	Ex_top<=1;
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;//无关
end
/*4'd12:
begin
	static<=4'd0; 
	PC_source<=2'b10;//
	RegDt0<=0;//no 
	Memtoreg<=2'b00;// no
	RegDst<=2'b00;//yes
	condition<=3'b111;//
	ALUsrcA<=0;//
	ALUsrcB<=3'b000;//无关
	ALU_op<=4'b0000;//无关
	Ex_top<=0;//yes
	Shift_op<=2'b00;//无关
	Shift_amountSrc<=0;//无关
	ALUShift_sel<=0;
end
*/
endcase
end
endmodule



module registers_all(clk,rs_addr,rt_addr,rd_addr,RegDt0,RegDst,rd_in,Rd_write_byte_en,rs_out,rt_out);//调用寄存器组模块
input clk;//Clock
input [4:0]rs_addr,rt_addr,rd_addr;//2个32位读信号，1个32位写信号
reg [4:0]rs_addr2,rt_addr2,rd_addr2;//ALU的输入
input RegDt0;
input [1:0]RegDst;
input [31:0]rd_in;//32位的数据输入
input [3:0]Rd_write_byte_en;//enable of byte
output reg[31:0]rs_out,rt_out;//output of 32bits data 
reg[31:0]regi[31:0];//Register Group 
initial 
	begin
		regi[1][31:0]=32'd1022;
		regi[2][31:0]=32'd1;
		regi[30][31:0]=32'h7fffffff;//用于检验Overflow
		regi[31][31:0]=32'h0f1f7f38;//用于rotr
	end
always @(negedge clk)
begin //write the data
regi[0]=32'd0;//R0 register is always zero
if(rd_addr2!=0)//Not the register Zero  
begin
if(Rd_write_byte_en[3]==0)
	regi[rd_addr2][31:24]=rd_in[31:24];
if(Rd_write_byte_en[2]==0)
	regi[rd_addr2][23:16]=rd_in[23:16];
if(Rd_write_byte_en[1]==0)
	regi[rd_addr2][15:8]=rd_in[15:8];
if(Rd_write_byte_en[0]==0)
	regi[rd_addr2][7:0]=rd_in[7:0];
end
end
always @ (*)
begin//read the address
	rs_addr2=rs_addr;
	if(RegDt0==0)
		rt_addr2=rt_addr;
	else
		rt_addr2=5'd0;
	if(RegDst==2'd0)
		rd_addr2=rt_addr;
	else if(RegDst==2'd1)
		rd_addr2=rd_addr;
	else if(RegDst==2'd2)
		rd_addr2=5'b11111;
	else
		rd_addr2=5'bzzzzz;//相当于default情况
	rs_out=regi[rs_addr2];
	rt_out=regi[rt_addr2];
end
endmodule


module update_input_ALU (ALUsrcA,ALUsrcB,Rs_out,Rt_out,PC_out,IR,Ex_top,A_in,B_in);//获取ALU的A_in和B_in
input ALUsrcA;
input [2:0]ALUsrcB;
input [31:0]Rs_out,Rt_out;
input [31:0]PC_out;
input [15:0]IR;
input Ex_top;
output reg [31:0]A_in,B_in;
reg [31:0]Ex_offset;
always @(*)
begin
if(Ex_top==0)//求出Ex_offset
	Ex_offset={16'd0,IR[15:0]};
else
	begin
	if(IR[15]==0)
		Ex_offset={16'd0,IR[15:0]};
	else
		Ex_offset={16'hffff,IR[15:0]};
	end
if(ALUsrcA==0)//求A_in
	A_in=PC_out;
else
	A_in=Rs_out;
if(ALUsrcB==3'd0)//求B_in
	B_in=Rt_out;
else if(ALUsrcB==3'd1)
	B_in=32'd4;
else if(ALUsrcB==3'd2)
	B_in=Ex_offset;
else if(ALUsrcB==3'd3)
	B_in={Ex_offset[29:0],2'b00};
else if(ALUsrcB==3'd4)
	B_in={IR[15:0],16'd0};
end
endmodule


module ALU_32(A_in,B_in,ALU_op,ALU_out,Less,Overflow_out,Zero);//ALU
input [31:0]A_in,B_in;
input [3:0]ALU_op;
output reg [31:0]ALU_out;
output reg Less,Overflow_out,Zero;
reg [2:0]ALU_ctr;
reg [31:0]O_out;
reg [31:0]B_not;
reg Overflow;//判断有无溢出
reg Negative;//判断正负数
reg Carry;//判断有无进位
integer i;//用于for循环
integer amount;//用于计算前导零和前导一
reg tag;//用于跳出for循环
always@(A_in,B_in,ALU_op)
begin//设置ALU控制器
ALU_ctr[2]=(!ALU_op[3])&(!ALU_op[1])||(!ALU_op[3])&(ALU_op[2])&(ALU_op[0])||ALU_op[3]&ALU_op[1];
ALU_ctr[1]=(!ALU_op[3])&(!ALU_op[2])&(!ALU_op[1])||ALU_op[3]&(!ALU_op[2])&(!ALU_op[0])||ALU_op[2]&ALU_op[1]&(!ALU_op[0])||ALU_op[3]&ALU_op[1];
ALU_ctr[0]=(!ALU_op[2])&(!ALU_op[1])||(!ALU_op[3])&ALU_op[2]&ALU_op[0]||ALU_op[3]&ALU_op[2]&ALU_op[1];
if(ALU_op[0]==0)//做加法
begin
B_not=B_in;
end
else//做减法
begin
B_not=~B_in;
end
{Carry,O_out}=A_in+B_not+ALU_op[0];//实现加法器
if(O_out==0)//output Zero
Zero=1;
else
Zero=0;
Overflow=(!A_in[31]&!B_not[31]&O_out[31])||(A_in[31]&B_not[31]&!O_out[31]);//判断Overflow
if(O_out[31]==0)//set 正负数
Negative=0;
else
Negative=1;
if(ALU_op[3:1]==3'b111)//output Overflow_out
Overflow_out=Overflow;
else
Overflow_out=0;
if(ALU_op[3:0]==4'b0111)//sltu
Less=!Carry;
else
Less=(Overflow&(!Negative))||((!Overflow)&Negative);
case(ALU_ctr)
3'b000://前导零or前导一
begin
tag=0;
if(ALU_op[0]==0)//前导0，对于A_in
begin
amount=0;
for(i=31;i>0&&tag==0;i=i-1)
begin
if(A_in[i]!=0)
begin
ALU_out=amount;
tag=1;
end
else
amount=amount+1;
end
end
else//前导1
begin
amount=0;
for(i=31;i>0&&tag==0;i=i-1)
begin
if(A_in[i]==0)
begin
ALU_out=amount;
tag=1;
end
else
amount=amount+1;
end
end
ALU_out=amount;
end
3'b001://异或
ALU_out[31:0]=A_in[31:0]^B_in[31:0];
3'b010://或
ALU_out[31:0]=A_in[31:0]|B_in[31:0];
3'b011://或非
ALU_out[31:0]=~(A_in[31:0]|B_in[31:0]);
3'b100://与
ALU_out[31:0]=A_in[31:0]&B_in[31:0];
3'b101://sltu or slti
begin
case(Less)//no matter what,Less is the sel
0:ALU_out=32'd0;
1:ALU_out=32'd1;
endcase
end
3'b110://seb or seh
begin
if(ALU_op[0]==0)//seb
begin
if(B_in[7]==0)
ALU_out={24'd0,B_in[7:0]};
else
ALU_out={24'b111111111111111111111111,B_in[7:0]};
end
else//seh
begin
if(B_in[15]==0)
ALU_out={16'd0,B_in[15:0]};
else
ALU_out={16'b1111111111111111,B_in[15:0]};
end
end
3'b111://加减法
ALU_out=O_out;
endcase
end
endmodule



module updateRd_enable(Overflow2,IR,Mem_addr_in,Rd_write_byte_en);//得到Rd_write_byte_en
input Overflow2;
input [31:0]IR;
input [1:0]Mem_addr_in;
output reg [3:0]Rd_write_byte_en;
always @(Overflow2 or IR)
begin
if(IR[31:26]==6'b100010)//lwl指令
begin
	case(Mem_addr_in)
		2'd0:
			Rd_write_byte_en=4'b0000;
		2'd1:
			Rd_write_byte_en=4'b0001;
		2'd2:
			Rd_write_byte_en=4'b0011;
		2'd3:
			Rd_write_byte_en=4'b0111;
	endcase
end
else if(IR[31:26]==6'b101010)//swl指令
begin
	case(Mem_addr_in)
		2'd0:
			Rd_write_byte_en=4'b0000;
		2'd1:
			Rd_write_byte_en=4'b1000;
		2'd2:
			Rd_write_byte_en=4'b1100;
		2'd3:
			Rd_write_byte_en=4'b1110;
	endcase
end
else if(((IR[31:26]==6'd0&&IR[5:0]==6'b100000)||(IR[31:26]==6'b001000)||(IR[31:26]==6'd0&&IR[5:0]==6'b100010))&&Overflow2==1)
	Rd_write_byte_en=4'b1111;//不存入寄存器组
else
	Rd_write_byte_en=4'b0000;//存入寄存器组
end
endmodule

module Shift_move(Shift_in,Shift_amountSrc,IR,Rs_out,Shift_op,Shift_out);//桶型移位器
input [31:0]Shift_in;
input Shift_amountSrc;
input [10:6]IR;
input [4:0]Rs_out;
reg [4:0]Shift_amount;
input [1:0]Shift_op;
output reg[31:0]Shift_out;
always@(IR[10:6] or Rs_out[4:0] or Shift_amountSrc or Shift_op or Shift_in)
begin
if(Shift_amountSrc==0)
Shift_amount=IR[10:6];
else
Shift_amount=Rs_out[4:0];
case(Shift_op)
2'b00://逻辑左移
begin
case(Shift_amount)
1:
Shift_out={Shift_in[30:0],1'd0};
2:
Shift_out={Shift_in[29:0],2'd0};
3:
Shift_out={Shift_in[28:0],3'd0};
4:
Shift_out={Shift_in[27:0],4'd0};
5:
Shift_out={Shift_in[26:0],5'd0};
6:
Shift_out={Shift_in[25:0],6'd0};
7:
Shift_out={Shift_in[24:0],7'd0};
8:
Shift_out={Shift_in[23:0],8'd0};
9:
Shift_out={Shift_in[22:0],9'd0};
10:
Shift_out={Shift_in[21:0],10'd0};
11:
Shift_out={Shift_in[20:0],11'd0};
12:
Shift_out={Shift_in[19:0],12'd0};
13:
Shift_out={Shift_in[18:0],13'd0};
14:
Shift_out={Shift_in[17:0],14'd0};
15:
Shift_out={Shift_in[16:0],15'd0};
16:
Shift_out={Shift_in[15:0],16'd0};
17:
Shift_out={Shift_in[14:0],17'd0};
18:
Shift_out={Shift_in[13:0],18'd0};
19:
Shift_out={Shift_in[12:0],19'd0};
20:
Shift_out={Shift_in[11:0],20'd0};
21:
Shift_out={Shift_in[10:0],21'd0};
22:
Shift_out={Shift_in[9:0],22'd0};
23:
Shift_out={Shift_in[8:0],23'd0};
24:
Shift_out={Shift_in[7:0],24'd0};
25:
Shift_out={Shift_in[6:0],25'd0};
26:
Shift_out={Shift_in[5:0],26'd0};
27:
Shift_out={Shift_in[4:0],27'd0};
28:
Shift_out={Shift_in[3:0],28'd0};
29:
Shift_out={Shift_in[2:0],29'd0};
30:
Shift_out={Shift_in[1:0],30'd0};
31:
Shift_out={Shift_in[0],31'd0};
default:
Shift_out=Shift_in;
endcase
end 
2'b01://逻辑右移
begin
case(Shift_amount)
1:
Shift_out={1'd0,Shift_in[31:1]};
2:
Shift_out={2'd0,Shift_in[31:2]};
3:
Shift_out={3'd0,Shift_in[31:3]};
4:
Shift_out={4'd0,Shift_in[31:4]};
5:
Shift_out={5'd0,Shift_in[31:5]};
6:
Shift_out={6'd0,Shift_in[31:6]};
7:
Shift_out={7'd0,Shift_in[31:7]};
8:
Shift_out={8'd0,Shift_in[31:8]};
9:
Shift_out={9'd0,Shift_in[31:9]};
10:
Shift_out={10'd0,Shift_in[31:10]};
11:
Shift_out={11'd0,Shift_in[31:11]};
12:
Shift_out={12'd0,Shift_in[31:12]};
13:
Shift_out={13'd0,Shift_in[31:13]};
14:
Shift_out={14'd0,Shift_in[31:14]};
15:
Shift_out={15'd0,Shift_in[31:15]};
16:
Shift_out={16'd0,Shift_in[31:16]};
17:
Shift_out={17'd0,Shift_in[31:17]};
18:
Shift_out={18'd0,Shift_in[31:18]};
19:
Shift_out={19'd0,Shift_in[31:19]};
20:
Shift_out={20'd0,Shift_in[31:20]};
21:
Shift_out={21'd0,Shift_in[31:21]};
22:
Shift_out={22'd0,Shift_in[31:22]};
23:
Shift_out={23'd0,Shift_in[31:23]};
24:
Shift_out={24'd0,Shift_in[31:24]};
25:
Shift_out={25'd0,Shift_in[31:25]};
26:
Shift_out={26'd0,Shift_in[31:26]};
27:
Shift_out={27'd0,Shift_in[31:27]};
28:
Shift_out={28'd0,Shift_in[31:28]};
29:
Shift_out={29'd0,Shift_in[31:29]};
30:
Shift_out={30'd0,Shift_in[31:30]};
31:
Shift_out={31'd0,Shift_in[31]};
default:
Shift_out=Shift_in;
endcase
end
2'b10://算术右移
begin
if(Shift_in[31]==0)
begin
case(Shift_amount)
1:
Shift_out={1'd0,Shift_in[31:1]};
2:
Shift_out={2'd0,Shift_in[31:2]};
3:
Shift_out={3'd0,Shift_in[31:3]};
4:
Shift_out={4'd0,Shift_in[31:4]};
5:
Shift_out={5'd0,Shift_in[31:5]};
6:
Shift_out={6'd0,Shift_in[31:6]};
7:
Shift_out={7'd0,Shift_in[31:7]};
8:
Shift_out={8'd0,Shift_in[31:8]};
9:
Shift_out={9'd0,Shift_in[31:9]};
10:
Shift_out={10'd0,Shift_in[31:10]};
11:
Shift_out={11'd0,Shift_in[31:11]};
12:
Shift_out={12'd0,Shift_in[31:12]};
13:
Shift_out={13'd0,Shift_in[31:13]};
14:
Shift_out={14'd0,Shift_in[31:14]};
15:
Shift_out={15'd0,Shift_in[31:15]};
16:
Shift_out={16'd0,Shift_in[31:16]};
17:
Shift_out={17'd0,Shift_in[31:17]};
18:
Shift_out={18'd0,Shift_in[31:18]};
19:
Shift_out={19'd0,Shift_in[31:19]};
20:
Shift_out={20'd0,Shift_in[31:20]};
21:
Shift_out={21'd0,Shift_in[31:21]};
22:
Shift_out={22'd0,Shift_in[31:22]};
23:
Shift_out={23'd0,Shift_in[31:23]};
24:
Shift_out={24'd0,Shift_in[31:24]};
25:
Shift_out={25'd0,Shift_in[31:25]};
26:
Shift_out={26'd0,Shift_in[31:26]};
27:
Shift_out={27'd0,Shift_in[31:27]};
28:
Shift_out={28'd0,Shift_in[31:28]};
29:
Shift_out={29'd0,Shift_in[31:29]};
30:
Shift_out={30'd0,Shift_in[31:30]};
31:
Shift_out={31'd0,Shift_in[31]};
default:
Shift_out=Shift_in;
endcase
end
else
begin
case(Shift_amount)
1:
Shift_out={1'b1,Shift_in[31:1]};
2:
Shift_out={2'b11,Shift_in[31:2]};
3:
Shift_out={3'b111,Shift_in[31:3]};
4:
Shift_out={4'b1111,Shift_in[31:4]};
5:
Shift_out={5'b11111,Shift_in[31:5]};
6:
Shift_out={6'b111111,Shift_in[31:6]};
7:
Shift_out={7'b1111111,Shift_in[31:7]};
8:
Shift_out={8'b11111111,Shift_in[31:8]};
9:
Shift_out={9'b111111111,Shift_in[31:9]};
10:
Shift_out={10'b1111111111,Shift_in[31:10]};
11:
Shift_out={11'b11111111111,Shift_in[31:11]};
12:
Shift_out={12'b111111111111,Shift_in[31:12]};
13:
Shift_out={13'b1111111111111,Shift_in[31:13]};
14:
Shift_out={14'b11111111111111,Shift_in[31:14]};
15:
Shift_out={15'b111111111111111,Shift_in[31:15]};
16:
Shift_out={16'b1111111111111111,Shift_in[31:16]};
17:
Shift_out={17'b11111111111111111,Shift_in[31:17]};
18:
Shift_out={18'b111111111111111111,Shift_in[31:18]};
19:
Shift_out={19'b1111111111111111111,Shift_in[31:19]};
20:
Shift_out={20'b11111111111111111111,Shift_in[31:20]};
21:
Shift_out={21'b111111111111111111111,Shift_in[31:21]};
22:
Shift_out={22'b1111111111111111111111,Shift_in[31:22]};
23:
Shift_out={23'b11111111111111111111111,Shift_in[31:23]};
24:
Shift_out={24'b111111111111111111111111,Shift_in[31:24]};
25:
Shift_out={25'b1111111111111111111111111,Shift_in[31:25]};
26:
Shift_out={26'b11111111111111111111111111,Shift_in[31:26]};
27:
Shift_out={27'b111111111111111111111111111,Shift_in[31:27]};
28:
Shift_out={28'b1111111111111111111111111111,Shift_in[31:28]};
29:
Shift_out={29'b11111111111111111111111111111,Shift_in[31:29]};
30:
Shift_out={30'b111111111111111111111111111111,Shift_in[31:30]};
31:
Shift_out={31'b1111111111111111111111111111111,Shift_in[31]};
default:
Shift_out=Shift_in;
endcase
end
end
2'b11://循环右移
begin
case(Shift_amount)
1:
Shift_out={Shift_in[0],Shift_in[31:1]};
2:
Shift_out={Shift_in[1:0],Shift_in[31:2]};
3:
Shift_out={Shift_in[2:0],Shift_in[31:3]};
4:
Shift_out={Shift_in[3:0],Shift_in[31:4]};
5:
Shift_out={Shift_in[4:0],Shift_in[31:5]};
6:
Shift_out={Shift_in[5:0],Shift_in[31:6]};
7:
Shift_out={Shift_in[6:0],Shift_in[31:7]};
8:
Shift_out={Shift_in[7:0],Shift_in[31:8]};
9:
Shift_out={Shift_in[8:0],Shift_in[31:9]};
10:
Shift_out={Shift_in[9:0],Shift_in[31:10]};
11:
Shift_out={Shift_in[10:0],Shift_in[31:11]};
12:
Shift_out={Shift_in[11:0],Shift_in[31:12]};
13:
Shift_out={Shift_in[12:0],Shift_in[31:13]};
14:
Shift_out={Shift_in[13:0],Shift_in[31:14]};
15:
Shift_out={Shift_in[14:0],Shift_in[31:15]};
16:
Shift_out={Shift_in[15:0],Shift_in[31:16]};
17:
Shift_out={Shift_in[16:0],Shift_in[31:17]};
18:
Shift_out={Shift_in[17:0],Shift_in[31:18]};
19:
Shift_out={Shift_in[18:0],Shift_in[31:19]};
20:
Shift_out={Shift_in[19:0],Shift_in[31:20]};
21:
Shift_out={Shift_in[20:0],Shift_in[31:21]};
22:
Shift_out={Shift_in[21:0],Shift_in[31:22]};
23:
Shift_out={Shift_in[22:0],Shift_in[31:23]};
24:
Shift_out={Shift_in[23:0],Shift_in[31:24]};
25:
Shift_out={Shift_in[24:0],Shift_in[31:25]};
26:
Shift_out={Shift_in[25:0],Shift_in[31:26]};
27:
Shift_out={Shift_in[26:0],Shift_in[31:27]};
28:
Shift_out={Shift_in[27:0],Shift_in[31:28]};
29:
Shift_out={Shift_in[28:0],Shift_in[31:29]};
30:
Shift_out={Shift_in[29:0],Shift_in[31:30]};
31:
Shift_out={Shift_in[30:0],Shift_in[31]};
default:
Shift_out=Shift_in;
endcase
end
endcase
end
endmodule




module out_ALU_Shift(ALU_out,Shift_out,ALUShift_sel,ALUShift_out);//
input ALUShift_sel;
input [31:0]ALU_out,Shift_out;
output reg [31:0]ALUShift_out;
//initial ALUShift_out=32'h00ff00ff;
always @(ALU_out or Shift_out or ALUShift_sel)
begin
if(ALUShift_sel==0)
ALUShift_out=ALU_out;
else
ALUShift_out=Shift_out;
end
endmodule



module Addr_register(clk,ALUShift_out,AddrReg_write_en,AddrReg_out);//地址寄存器
input clk;
input [31:0]ALUShift_out;
input AddrReg_write_en;
output reg[31:0]AddrReg_out;
always @(negedge clk)
begin
if(AddrReg_write_en==1)
	AddrReg_out=ALUShift_out;
end
endmodule


module return_PC_in(ALUShift_out,AddrReg_out,PC_out,PC_source,IR,PC_in);//反馈PC_in
input [31:0]ALUShift_out,AddrReg_out,PC_out;
input [1:0]PC_source;
input [25:0]IR;
output reg[31:0]PC_in;
always @(*)
begin
	if(PC_source==2'd0)
		PC_in=ALUShift_out;
	else if(PC_source==2'd1)
		PC_in=AddrReg_out;
	else if(PC_source==2'd2)
		PC_in={PC_out[31:28],IR[25:0],2'd0};
end
endmodule

module return_Rd_in(Memtoreg,AddrReg_out,Mem_data_shift,ALU_out,Rd_in);//反馈Rd_in
input [1:0]Memtoreg;
input [31:0]AddrReg_out,Mem_data_shift,ALU_out;
output reg[31:0]Rd_in;
always@(*)
begin
case(Memtoreg)
2'd0:
Rd_in=AddrReg_out;
2'd1:
Rd_in=Mem_data_shift;
2'd2:
Rd_in=ALU_out;
default:
Rd_in=32'bzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;
endcase
end
endmodule

module produce_PC_write_en(PC_write,PC_write_cond,Condition,Less,Zero,PC_write_en);//produce PC_write_en
input PC_write,PC_write_cond,Less,Zero;
input [2:0]Condition;
output reg PC_write_en;
reg result;
always @(*)
begin
case(Condition)
3'd0:
result=0;
3'd1:
result=Zero;
3'd2:
result=!Zero;
3'd3:
result=!Less;
3'd4:
result=!(Less^Zero);
3'd5:
result=(Less^Zero);
3'd6:
result=Less;
3'd7:
result=1;
endcase
PC_write_en=(result&&PC_write_cond)||PC_write;
end
endmodule

module MemoutputShift(IR[31:26],Mem_data_out,Mem_addr_in[1:0],Mem_data_shift);//存储器输出移位器
input [31:26]IR;
input [31:0]Mem_data_out;
input [1:0]Mem_addr_in;
reg [2:0]Mem_data_shift_ctr;//控制信号
reg [31:0]Mem_d_r;//由Mem_addr_in片选出来
reg [31:0]Mem_d_l;//由Mem_addr_in片选出来
output reg [31:0]Mem_data_shift;
always @(*)
begin
Mem_data_shift_ctr[2]=IR[31]&&(!IR[30])&&(!IR[29])&&(((!IR[28])&&IR[27])||(IR[27]&&(!IR[26])));
Mem_data_shift_ctr[1]=IR[31]&&(!IR[30])&&(!IR[29])&&(((!IR[27])&&IR[26])||(IR[28]&&IR[27]&&(!IR[26])));
Mem_data_shift_ctr[0]=IR[31]&&(!IR[30])&&(!IR[29])&&((IR[28]&&(!IR[27]))||((!IR[28])&&IR[27]&&(!IR[26])));
case(Mem_addr_in)
2'd0:
begin
Mem_d_l[31:0]=Mem_data_out[31:0];//相当于左移
Mem_d_r[31:0]={24'd0,Mem_data_out[31:24]};//相当于左移
end
2'd1:
begin
Mem_d_l[31:0]={Mem_data_out[23:0],8'd0};
Mem_d_r[31:0]={16'd0,Mem_data_out[31:16]};
end
2'd2:
begin
Mem_d_l[31:0]={Mem_data_out[15:0],16'd0};
Mem_d_r[31:0]={8'd0,Mem_data_out[31:8]};
end
2'd3:
begin
Mem_d_l[31:0]={Mem_data_out[7:0],8'd0};
Mem_d_r[31:0]=Mem_data_out;
end
endcase
case(Mem_data_shift_ctr)
3'd0:
begin
if(Mem_d_l[31]==0)
	Mem_data_shift={24'd0,Mem_d_l[31:24]};
else
	Mem_data_shift={24'd1,Mem_d_l[31:24]};
end
3'd1:
begin
	Mem_data_shift={24'd0,Mem_d_l[31:24]};
end
3'd2:
begin
if(Mem_d_l[31]==0)
	Mem_data_shift={16'd0,Mem_d_l[31:16]};
else
	Mem_data_shift={16'd1,Mem_d_l[31:16]};
end
3'd3:
	Mem_data_shift={16'd0,Mem_d_l[31:16]};
3'd4,3'd5:
	Mem_data_shift=Mem_d_l;
3'd6:
	Mem_data_shift=Mem_d_r;
3'd7:
	Mem_data_shift=32'd0;
endcase
end
endmodule


module RegoutputShift(IR[31:26],Rt_out,Mem_addr_in[1:0],Rt_out_shift);//寄存器输出移位器
input [31:26]IR;
input [31:0]Rt_out;
input [1:0]Mem_addr_in;
reg [2:0]Rt_out_shift_ctr;//控制信号
reg [31:0]Rt_out_r;//由Mem_addr_in片选出来
reg [31:0]Rt_out_l;//由Mem_addr_in片选出来
output reg [31:0]Rt_out_shift;
always @(*)
begin
Rt_out_shift_ctr[2]=IR[31]&&(!IR[30])&&IR[29]&&(((!IR[28])&&IR[27])||(IR[27]&&(!IR[26])));
Rt_out_shift_ctr[1]=IR[31]&&(!IR[30])&&IR[29]&&(((!IR[28])&&(!IR[27])&&IR[26])||(IR[28]&&IR[27]&&(!IR[26])));
Rt_out_shift_ctr[0]=IR[31]&&(!IR[30])&&IR[29]&&((!IR[28]&&IR[27]&&(!IR[26])));
case(Mem_addr_in)
2'd0:
begin
Rt_out_l[31:0]=Rt_out[31:0];//相当于右移
Rt_out_r[31:0]={Rt_out[7:0],24'd0};//相当于右移
end
2'd1:
begin
Rt_out_l[31:0]={8'd0,Rt_out[31:8]};
Rt_out_r[31:0]={Rt_out[15:0],16'd0};
end
2'd2:
begin
Rt_out_l[31:0]={16'd0,Rt_out[31:16]};
Rt_out_r[31:0]={Rt_out[23:16],8'd0};
end
2'd3:
begin
Rt_out_l[31:0]={24'd0,Rt_out[31:24]};
Rt_out_r[31:0]=Rt_out;
end
endcase
case(Rt_out_shift_ctr)
3'd0:
	Rt_out_shift[31:0]={Rt_out[7:0],Rt_out[7:0],Rt_out[7:0],Rt_out[7:0]};
3'd1:
	Rt_out_shift[31:0]=32'd0;
3'd2:
	Rt_out_shift[31:0]={Rt_out[15:8],Rt_out[7:0],Rt_out[15:0],Rt_out[7:0]};
3'd3:
	Rt_out_shift[31:0]=32'd0;
3'd4,3'd5:
	Rt_out_shift[31:0]=Rt_out_l[31:0];
3'd6:
	Rt_out_shift[31:0]=Rt_out_r[31:0];
3'd7:
	Rt_out_shift[31:0]=32'd0;
endcase
end
endmodule